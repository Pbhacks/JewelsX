import { IViewerPlugin, UiObjectConfig } from 'webgi/interfaces';
import { ToneMapping } from 'three';
import { TonemapPass } from '../../passes/threejs/TonemapPass';
import { GenericFilterPlugin } from '../GenericFilterPlugin';
import { GBufferPlugin } from 'webgi/plugins/GBufferPlugin';
import { ViewerApp } from 'webgi/viewer/ViewerApp';
export declare class TonemapPlugin extends GenericFilterPlugin<TonemapPass, 'tonemap', '', ViewerApp> implements IViewerPlugin {
    readonly depthTonemap: boolean;
    readonly renderToScreen: boolean;
    readonly screenShader: string[];
    static readonly PluginType = "Tonemap";
    passId: 'tonemap';
    dependencies: (typeof GBufferPlugin)[];
    protected _beforeFilters: never[];
    protected _afterFilters: string[];
    protected _requiredFilters: string[];
    /**
     *
     * @param depthTonemap
     * @param renderToScreen
     * @param screenShader [fragment shader pars, fragment shader main] add code before and inside the main function after tonemapping.
     */
    constructor(depthTonemap?: boolean, renderToScreen?: boolean, screenShader?: string[]);
    onAdded(viewer: ViewerApp): Promise<void>;
    passCtor(v: ViewerApp): TonemapPass;
    protected _update(v: ViewerApp): boolean;
    get exposure(): number;
    set exposure(value: number);
    get toneMapping(): ToneMapping;
    set toneMapping(value: ToneMapping);
    private _setDirty;
    get uiConfig(): UiObjectConfig;
}
//# sourceMappingURL=TonemapPlugin.d.ts.map