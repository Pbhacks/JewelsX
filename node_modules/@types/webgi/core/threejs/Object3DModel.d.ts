import { AnyOptions, IMaterial, IModel, UiObjectConfig } from 'webgi/interfaces';
import { BufferGeometry, Mesh, Object3D } from 'three';
import { IEvent } from 'webgi/helpers/EventDispatcher';
export declare class Object3DModel implements IModel<Object3D> {
    assetType: 'model';
    get modelObject(): Object3D & IModel<Object3D>;
    private _modelObject;
    constructor(modelObject: Object3D, { pseudoCenter, autoScale, autoScaleRadius, license, ...options }?: AnyOptions);
    get license(): string;
    set license(license: string);
    addEventListener(type: string, listener: (event: IEvent<string>) => void): void;
    dispatchEvent(event: IEvent<string>): void;
    hasEventListener(type: string, listener: (event: IEvent<string>) => void): boolean;
    removeEventListener(type: string, listener: (event: IEvent<string>) => void): void;
    dispose(): void;
    setDirty(e?: AnyOptions): void;
    updateBounds(): void;
    private _uiConfig?;
    get uiConfig(): UiObjectConfig;
    clone(): Object3DModel;
}
export declare function makeObject3DUiConfig(object: Object3D, isMesh?: boolean): UiObjectConfig;
export declare function makeGeometryUiConfig(geometry: BufferGeometry): UiObjectConfig;
export declare function setupObject3dModel(obj: IModel<Object3D>, modelProcessor: (m: IModel) => (IModel | undefined)): IModel<Object3D<import("three").Event>>;
export declare function setupIModel(object: Object3D & IModel, parent?: IModel | undefined, modelProcessor?: (m: IModel) => (IModel | undefined)): IModel & Object3D;
export declare const iGeometryIgnoredUserData: string[];
export declare const iModelIgnoredUserData: string[];
export declare function copyObjectUserData(dest: any, source: any): any;
export declare function setMeshMaterial(mesh: Mesh & IModel, material: IMaterial | undefined | null | IMaterial[]): IMaterial[];
export declare function setMeshGeometry(mesh: Mesh & IModel, geometry: BufferGeometry | undefined | null, force?: boolean): BufferGeometry | undefined;
//# sourceMappingURL=Object3DModel.d.ts.map