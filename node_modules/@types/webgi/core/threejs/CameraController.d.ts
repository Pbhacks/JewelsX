import { IUniform, OrthographicCamera, PerspectiveCamera, Vector3 } from 'three';
import { ICamera, IOrthographicCameraOptions, IPerspectiveCameraOptions, IUiConfigContainer, UiObjectConfig } from 'webgi/interfaces';
import { SimpleEventDispatcher } from 'webgi/helpers/EventDispatcher';
import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';
export declare class SerializableOrbitControls extends OrbitControls implements IUiConfigContainer {
    type: string;
    enableDamping: boolean;
    dampingFactor: number;
    autoRotate: boolean;
    autoRotateSpeed: number;
    enableZoom: boolean;
    zoomSpeed: number;
    maxZoomSpeed: number;
    enableRotate: boolean;
    rotateSpeed: number;
    enablePan: boolean;
    panSpeed: number;
    minDistance: number;
    maxDistance: number;
    minZoom: number;
    maxZoom: number;
    minPolarAngle: number;
    maxPolarAngle: number;
    minAzimuthAngle: number;
    maxAzimuthAngle: number;
    screenSpacePanning: boolean;
    keyPanSpeed: number;
    uiConfig?: UiObjectConfig;
    zoomIn(delta: number): void;
    zoomOut(delta: number): void;
}
export declare class CameraController extends SimpleEventDispatcher<'update'> implements ICamera<IPerspectiveCameraOptions | IOrthographicCameraOptions, PerspectiveCamera | OrthographicCamera, SerializableOrbitControls | undefined> {
    get controls(): SerializableOrbitControls | undefined;
    private _controls?;
    private _controlsMode;
    private _container;
    private _isActiveCamera;
    get target(): Vector3;
    set target(target: Vector3);
    get position(): Vector3;
    set position(position: Vector3);
    getCameraOptions(): IPerspectiveCameraOptions | IOrthographicCameraOptions;
    setCameraOptions(value: Partial<IPerspectiveCameraOptions | IOrthographicCameraOptions>, setDirty?: boolean): void;
    private _refreshCameraOptions;
    private _camera;
    get interactionsEnabled(): boolean;
    set interactionsEnabled(value: boolean);
    private _interactionsEnabled;
    autoLookAtTarget: boolean;
    near: number;
    far: number;
    protected _nearFarChanged(): void;
    private _options;
    private _position;
    private _target;
    constructor(camera?: OrthographicCamera | PerspectiveCamera, options?: Partial<IPerspectiveCameraOptions | IOrthographicCameraOptions>, canvas?: HTMLElement);
    refreshAspect(setDirty?: boolean): void;
    refreshTarget(): void;
    private _initCameraControls;
    private _disposeCameraControls;
    refreshCameraControls(setDirty?: boolean): void;
    setDirty(): void;
    activateMain(): void;
    deactivateMain(): void;
    get cameraObject(): PerspectiveCamera | OrthographicCamera;
    get modelObject(): PerspectiveCamera | OrthographicCamera;
    uiConfig: UiObjectConfig;
    assetType: 'model';
    dispose(): void;
    targetUpdated(setDirty?: boolean): void;
    positionUpdated(setDirty?: boolean): void;
    updateShaderProperties(material: {
        defines: Record<string, string | number | undefined>;
        uniforms: {
            [p: string]: IUniform;
        };
    }): this;
    toJSON(meta?: any): any;
    fromJSON(data: any, meta?: any): this | null;
    refreshCameraOptions(setDirty?: boolean): void;
}
//# sourceMappingURL=CameraController.d.ts.map