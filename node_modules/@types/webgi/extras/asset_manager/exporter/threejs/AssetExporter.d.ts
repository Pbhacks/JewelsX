import { AnyOptions, ISceneObject, IViewerApp, TAssetTypes } from 'webgi/interfaces';
import { SimpleEventDispatcher } from 'webgi/helpers/EventDispatcher';
import { IAssetExporter, IExporter } from 'webgi/extras/asset_manager/AssetManager';
import { ObjectProcessorMap } from 'webgi/helpers/ObjectProcessorMap';
import { GLTFExporter2 } from 'webgi/extras/asset_manager/exporter/threejs/exporters/GLTFExporter2';
import { GLTFWriter2 } from 'webgi/extras/asset_manager/exporter/threejs/exporters/GLTFWriter2';
import { MeshStandardMaterial } from 'three';
export declare type BlobExt = Blob & {
    ext: string;
};
export declare class AssetExporter extends SimpleEventDispatcher<'exporterCreate' | 'exportFile'> implements IAssetExporter {
    private _processors;
    get processors(): ObjectProcessorMap<TAssetTypes>;
    static readonly Exporters: IExporter[];
    getExporter(...ext: string[]): IExporter | undefined;
    constructor(viewer: IViewerApp, options?: AnyOptions);
    exportObject(obj?: ISceneObject, options?: AnyOptions): Promise<BlobExt | undefined>;
    private _exportFile;
    private _createParser;
    private _cachedParsers;
    private _getParser;
    processBeforeExport(obj: ISceneObject, options?: AnyOptions): Promise<{
        obj: any;
        ext: string;
        typeExt?: string;
    } | undefined>;
    dispose(): void;
}
export declare function addGLTFExporter(viewer: IViewerApp, exporterClass?: typeof GLTFExporter2, onCtor?: (ex: GLTFExporter2) => void): void;
/**
 * Bump Map Extension
 * bumpTexture and bumpScale are added to the material(standard and physical)
 *
 * Specification: https://dist.pixotronics.com/webgi/manual/gltf/WEBGI_materials_bumpmap.html
 */
declare class GLTFMaterialsBumpMapExtensionExport {
    writer: GLTFWriter2;
    name: string;
    constructor(writer: GLTFWriter2);
    writeMaterial(material: MeshStandardMaterial, materialDef: any): void;
}
export type { GLTFMaterialsBumpMapExtensionExport };
/**
 * Light Map Extension
 * lightMapTexture and lightMapIntensity are added to the material(standard and physical)
 *
 * Specification: https://dist.pixotronics.com/webgi/manual/gltf/WEBGI_materials_lightmap.html
 */
declare class GLTFMaterialsLightMapExtensionExport {
    writer: GLTFWriter2;
    name: string;
    constructor(writer: GLTFWriter2);
    writeMaterial(material: MeshStandardMaterial, materialDef: any): void;
}
export type { GLTFMaterialsLightMapExtensionExport };
declare class GLTFMaterialsAlphaMapExtensionExport {
    writer: GLTFWriter2;
    name: string;
    constructor(writer: GLTFWriter2);
    writeMaterial(material: MeshStandardMaterial, materialDef: any): void;
}
export type { GLTFMaterialsAlphaMapExtensionExport };
//# sourceMappingURL=AssetExporter.d.ts.map