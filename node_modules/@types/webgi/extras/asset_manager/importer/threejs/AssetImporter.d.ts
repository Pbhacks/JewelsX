import { LoadingManager, TextureDataType, WebGLRenderer } from 'three';
import { AnyOptions, IFile, ISceneObject, IViewerApp, TAssetTypes } from 'webgi/interfaces';
import { SimpleEventDispatcher } from 'webgi/helpers/EventDispatcher';
import { IAsset, IAssetImporter, IImporter, ILoader } from 'webgi/extras/asset_manager/AssetManager';
import { ObjectProcessorMap } from 'webgi/helpers/ObjectProcessorMap';
export declare class AssetImporter extends SimpleEventDispatcher<'onLoad' | 'onProgress' | 'onStop' | 'onError' | 'onStart' | 'loaderCreate' | 'importFile' | 'importFiles'> implements IAssetImporter {
    private _processors;
    private _viewer;
    get processors(): ObjectProcessorMap<TAssetTypes>;
    get loadingManager(): LoadingManager;
    private _logger;
    private _loadingManager;
    static readonly Importers: IImporter[];
    constructor(viewer: IViewerApp, logging?: boolean);
    private _onLoad;
    private _onProgress;
    private _onError;
    private _onStart;
    private _rootContext?;
    private _urlModifier;
    private _createLoader;
    private _loaderCache;
    private _fileDatabase;
    importFiles(files: Map<string, IFile>, onProgress?: (event: ProgressEvent) => void, options?: AnyOptions & {
        allowedExtensions?: string[];
    }): Promise<Map<string, ISceneObject[]>>;
    registerFile(path: string, file?: IFile): ILoader | undefined;
    unregisterFile(path: string): void;
    private _isRootFileExtension;
    resolveURL(url: string): string;
    private _importFile;
    private _getImporter;
    private _getLoader;
    private _cachedAssets;
    importAsset(asset?: IAsset, options?: AnyOptions): Promise<ISceneObject[]>;
    importSingle<T>(asset?: IAsset, options?: AnyOptions): Promise<T | undefined>;
    importSinglePath<T extends ISceneObject>(path: string, options?: AnyOptions): Promise<T | undefined>;
    importPath(path: string, options?: AnyOptions): Promise<ISceneObject[]>;
    processImportedSingle<T extends ISceneObject>(res: any, options?: AnyOptions): Promise<T>;
    processImported(res: any, options?: AnyOptions): Promise<ISceneObject[]>;
    dispose(): void;
}
export declare function getTextureDataType(renderer?: WebGLRenderer): TextureDataType;
//# sourceMappingURL=AssetImporter.d.ts.map