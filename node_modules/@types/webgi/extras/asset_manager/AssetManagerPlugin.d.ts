import { SimpleEventDispatcher } from 'webgi/helpers/EventDispatcher';
import { AnyOptions, ISceneObject, IViewerPlugin } from 'webgi/interfaces';
import { IMaterialManager } from './AMaterialManager';
import { AssetImporter } from './importer/threejs/AssetImporter';
import { IAsset, IAssetExporter, IAssetManager } from './AssetManager';
import { ViewerApp } from 'webgi/viewer/ViewerApp';
import { ObjectLoader2 } from 'webgi/extras/asset_manager/importer/threejs/loaders/ObjectLoader2';
export interface AssetManagerOptions {
    linkDropzone?: boolean;
    simpleCache?: boolean;
    storage?: Cache | Storage;
}
export declare class AssetManagerPlugin extends SimpleEventDispatcher<''> implements IAssetManager, IViewerPlugin {
    static readonly PluginType = "AssetManager";
    private _viewer?;
    private _importer?;
    private _materials?;
    constructor(importer?: AssetImporter, materials?: IMaterialManager, { /* linkDropzone = true,*/ simpleCache, storage }?: AssetManagerOptions);
    addAsset(asset: IAsset, options?: AnyOptions): Promise<ISceneObject[]>;
    addFromPath(path: string, options?: AnyOptions): Promise<ISceneObject[]>;
    addProcessedAssets(imported: ISceneObject[], options: AnyOptions): (ISceneObject | undefined)[];
    addAssetSingle<T extends ISceneObject = ISceneObject>(asset: IAsset | undefined | string, options?: AnyOptions): Promise<T | undefined>;
    addImported(res: any, options?: AnyOptions): Promise<ISceneObject[] | undefined>;
    addImportedSingle<T extends ISceneObject>(res: any, options?: AnyOptions): Promise<T | undefined>;
    private _sceneUpdated;
    onAdded(viewer: ViewerApp): Promise<void>;
    onDispose(viewer: ViewerApp): Promise<void>;
    onRemove(viewer: ViewerApp): Promise<void>;
    get importer(): AssetImporter | undefined;
    get exporter(): IAssetExporter | undefined;
    get materials(): IMaterialManager | undefined;
    exportViewerConfig(): Record<string, any>;
    exportPluginPresets(filter?: string[]): {
        plugins: any[] | undefined;
        resources: {
            geometries: {};
            materials: {};
            textures: {};
            images: {};
            shapes: {};
            skeletons: {};
            animations: {};
        };
    };
    exportPluginPreset(plugin: IViewerPlugin): any;
    importPluginPreset(json: any, plugin?: IViewerPlugin): Promise<IViewerPlugin<import("webgi/interfaces").IViewerApp> | undefined>;
    static readonly ViewerTypeSlug = "vjson";
    importViewerConfig(viewerConfig: any, objLoader?: ObjectLoader2): Promise<void>;
    importConfigResources(json: any, objLoader?: ObjectLoader2): Promise<any>;
}
//# sourceMappingURL=AssetManagerPlugin.d.ts.map